{"version":3,"sources":["components/TodoList/TodoList.jsx","api/users.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filterValue","selectValue","filterValueChangeHandler","event","setState","target","value","selectValueChangeHandler","this","props","todos","onSelect","selectedUserId","filterTodos","filter","todo","title","toLowerCase","includes","trim","todosToRender","completed","className","type","name","onChange","map","key","id","classNames","readOnly","checked","onClick","userId","React","Component","API_URL","getAll","url","options","fetch","then","response","json","CurrentUser","user","getUser","data","prevProps","clearUser","href","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58bdadcb.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    filterValue: '',\n    selectValue: '',\n  }\n\n  filterValueChangeHandler = (event) => {\n    this.setState({\n      filterValue: event.target.value,\n    });\n  }\n\n  selectValueChangeHandler = (event) => {\n    this.setState({\n      selectValue: event.target.value,\n    });\n  }\n\n  render() {\n    const { todos, onSelect, selectedUserId } = this.props;\n    const { filterValue, selectValue } = this.state;\n\n    const filterTodos = todos.filter(todo => todo.title)\n      .filter(todo => (\n        todo.title.toLowerCase().includes(filterValue.toLowerCase().trim())));\n\n    let todosToRender = (filterValue)\n      ? filterTodos\n      : todos;\n\n    if (selectValue === 'active') {\n      todosToRender = todosToRender.filter(({ completed }) => !completed);\n    }\n\n    if (selectValue === 'completed') {\n      todosToRender = todosToRender.filter(({ completed }) => completed);\n    }\n\n    return (\n      <>\n        <div className=\"TodoList\">\n          <h2>Todos:</h2>\n          <input\n            className=\"TodoList__input\"\n            type=\"text\"\n            value={filterValue}\n            name={filterValue}\n            onChange={this.filterValueChangeHandler}\n          />\n          <select\n            className=\"TodoList__select\"\n            value={selectValue}\n            name={selectValue}\n            onChange={this.selectValueChangeHandler}\n          >\n            <option\n              value=\"\"\n            >\n              All\n            </option>\n            <option\n              value=\"active\"\n            >\n              Active\n            </option>\n            <option\n              value=\"completed\"\n            >\n              Completed\n            </option>\n          </select>\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\">\n              {todosToRender.map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames(\n                    'TodoList__item',\n                    {\n                      'TodoList__item--checked': todo.completed,\n                      'TodoList__item--unchecked': !todo.completed,\n                    },\n                  )}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      readOnly\n                      checked={todo.completed}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    onClick={() => {\n                      onSelect(todo.userId);\n                    }}\n                    className={classNames(\n                      'button', 'TodoList__user-button',\n                      {\n                        'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                      },\n                    )}\n                    type=\"button\"\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n  })).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com/`;\n\nexport function getAll(url, options) {\n  return fetch(\n    !options ? `${API_URL}${url}` : `${API_URL}${url}${options}`,\n  )\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getAll } from '../../api/users';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser = () => {\n    getAll('users', `/${this.props.userId}`)\n      .then(({ data }) => this.setState({ user: { ...data } }));\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <a\n          className=\"CurrentUser__email\"\n          href={`mailto:${user.email}`}\n        >\n          {user.email}\n        </a>\n        <a\n          className=\"CurrentUser__phone\"\n          href={`tel:${user.phone}`}\n        >\n          {user.phone}\n        </a>\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAll } from './api/users';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAll('todos')\n      .then(({ data }) => this.setState({ todos: [...data] }));\n  }\n\n  onSelect = (id) => {\n    if (this.state.selectedUserId !== id) {\n      this.setState({ selectedUserId: id });\n    }\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelect={this.onSelect}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}